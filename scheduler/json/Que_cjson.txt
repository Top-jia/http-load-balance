#1:
	对于#include"location/....h"和g++ -I(....)的方式的选定:
这两种方式都可以进行运行, 一边为直接选定所包含的文件的位置,
一个是,将其目录直接包含, 让程序自己去找.

#2:
	对于目录的编译过程的话: 最终生成的文件位置, 仍是主程序
所在的位置, 除非自己显示定义位置.

#3:
	对于在.c和.cpp混合编程的过程中. 再许多隐式转换的过程中
将会出现许多问题.
		$1:
		warning: deprecated conversion from string constant to ‘char*’ [-Wwrite-strings]
	因为传入的字符串是无法修改的, 
	CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
	因此会出现问题
		解决办法方式:
			将chars用 const修改的话讲不会出现问题。
		$2:关于json的测试                                                                                             
		     cat object.json | jq
			 cat object.json | python -m json.tool


part_4:
	dynamic library | 读json
part_5:
	读配置json | 写配置json
../part_5:

gold:
		json:完成加入
		log: 加锁
		thread: 初步
	config.json:
{
			"scheduler_methon":{
				"轮询":"Round Robin",
				"加权轮询":"Weighted Round Robin",
				"最少连接":"Lease Connection",
				"一致性hash":"consistent hash"
			},
			"host_info":{
				"ip":"127.0.0.1",
				"port":7800
			},

			"ser_info":{
				{
					"ip":"127.0.0.1",
					"port":7900
				},

				{
					"ip":"127.0.0.1",
					"port":7901

				},

				{
					"ip":"127.0.0.1",
					"port":7902
				}
			},

		"default_methon":"Round Robin"
}

Json.hpp:
		class Sinfo
		class json
Json.cpp:
		....
makefile
		....
